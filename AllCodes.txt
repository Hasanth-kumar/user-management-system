Auth-service:

📁 client/UserProfileClient.java:
package com.ums.auth_service.client;

import com.ums.auth_service.dto.UserProfileRequestDTO;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;
import org.springframework.web.reactive.function.client.WebClient;
import org.springframework.web.reactive.function.client.WebClientResponseException;
import reactor.core.publisher.Mono;

@Component
@RequiredArgsConstructor
@Slf4j
public class UserProfileClient {

    private final WebClient userWebClient;

    public void createUserProfile(UserProfileRequestDTO request) {
        userWebClient.post()
                .bodyValue(request)
                .retrieve()
                .bodyToMono(Void.class)
                .doOnSuccess(response -> log.info("User profile created successfully."))
                .doOnError(WebClientResponseException.class, e -> 
                    log.error("User service returned error: {}", e.getResponseBodyAsString()))
                .doOnError(Exception.class, e ->
                    log.error("User service is unreachable: {}", e.getMessage()))
                .onErrorResume(e -> Mono.empty()) // optional: prevent registration failure if user-service is down
                .subscribe(); // fire-and-forget
    }
}

____________________________________
📁 client/EmailClient.java:
package com.ums.auth_service.client;

import com.ums.auth_service.dto.EmailRequestDTO;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;
import org.springframework.web.reactive.function.client.WebClient;
import org.springframework.web.reactive.function.client.WebClientResponseException;
import reactor.core.publisher.Mono;

@Component
@RequiredArgsConstructor
@Slf4j
public class EmailClient {

    private final WebClient emailWebClient;

    public void sendEmail(EmailRequestDTO emailRequest) {
        emailWebClient.post()
                .uri("/send")
                .bodyValue(emailRequest)
                .retrieve()
                .bodyToMono(String.class)
                .doOnSuccess(response -> log.info("Email sent successfully"))
                .doOnError(WebClientResponseException.class, e -> {
                    log.error("Email service returned error: {}", e.getResponseBodyAsString());
                })
                .doOnError(Exception.class, e -> {
                    log.error("Email service is unreachable: {}", e.getMessage());
                })
                .onErrorResume(e -> Mono.empty())
                .subscribe(); // Fire and forget
    }
}
_____________________________________
CorsConfig.java:
package com.ums.auth_service.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.*;

@Configuration
public class CorsConfig implements WebMvcConfigurer {

    @Override
    public void addCorsMappings(CorsRegistry registry) {
        registry.addMapping("/**")
                .allowedOrigins("*") // Replace "*" with frontend domain in production
                .allowedMethods("GET", "POST", "PUT", "DELETE", "OPTIONS")
                .allowedHeaders("*");
    }
}
________________________________________
SecurityConfig.java:
package com.ums.auth_service.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.Customizer;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;

@Configuration
public class SecurityConfig {

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http
            .csrf(csrf -> csrf.disable()) // disable CSRF using Lambda DSL
            .authorizeHttpRequests(auth -> 
                auth.anyRequest().permitAll() // allow all requests without authentication
            )
            .httpBasic(Customizer.withDefaults()); // optional: enable basic HTTP authentication for debugging

        return http.build();
    }
}

____________________________________________
WebClientConfig.java:
package com.ums.auth_service.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.reactive.function.client.WebClient;

@Configuration
public class WebClientConfig {

    @Bean
    public WebClient emailWebClient() {
        return WebClient.builder()
                .baseUrl("http://localhost:8083/api/email") // Change if different
                .build();
    }

    @Bean
    public WebClient userWebClient() {
        return WebClient.builder()
                .baseUrl("http://localhost:8082/api/profiles") // user-service base URL
                .build();
    }

}

__________________________________________
AuthController.java:
package com.ums.auth_service.controller;

import com.ums.auth_service.dto.*;
import com.ums.auth_service.service.AuthService;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/auth")
@RequiredArgsConstructor
public class AuthController {

    private final AuthService authService;

    @PostMapping("/register")
    public ResponseEntity<String> register(@RequestBody RegisterRequest request) {
        String response = authService.register(request);
        return ResponseEntity.ok(response);
    }

    @PostMapping("/login")
    public ResponseEntity<AuthResponse> login(@RequestBody LoginRequest request) {
        AuthResponse token = authService.login(request);
        return ResponseEntity.ok(token);
    }
}
____________________________
AuthResponse.java:
package com.ums.auth_service.dto;

import lombok.*;

@Data
@AllArgsConstructor
@NoArgsConstructor
public class AuthResponse {
    private String token;
}
_____________________________
EmailRequestDTO.java:
package com.ums.auth_service.dto;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@AllArgsConstructor
@NoArgsConstructor
public class EmailRequestDTO {
    private String toEmail;
    private String subject;
    private String body;
}
// This class is used to send email requests from the auth service to the email service.
// It contains the recipient's email, subject, and body of the email.



_____________________________
LoginRequest.java:
package com.ums.auth_service.dto;

import lombok.*;

@Data
@AllArgsConstructor
@NoArgsConstructor
public class LoginRequest {
    private String email;
    private String password;
}
_____________________________
RegisterRequest.java:
package com.ums.auth_service.dto;

import lombok.*;

@Data
@AllArgsConstructor
@NoArgsConstructor
public class RegisterRequest {
    private String username;
    private String email;
    private String password;
    
    // NEW fields
    private String fullName;
    private String phone;
    private String address;
}
_____________________________

UserProfileRequestDTO.java:
package com.ums.auth_service.dto;

import lombok.*;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class UserProfileRequestDTO {
    private String userId;
    private String fullName;
    private String phone;
    private String address;
}
_____________________________
GlobalExceptionHandler.java:
package com.ums.auth_service.exception;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.Map;

@RestControllerAdvice
public class GlobalExceptionHandler {

    @ExceptionHandler(RuntimeException.class)
    public ResponseEntity<Map<String, Object>> handleRuntimeException(RuntimeException ex) {
        Map<String, Object> response = new HashMap<>();
        response.put("timestamp", LocalDateTime.now());
        response.put("status", HttpStatus.BAD_REQUEST.value());
        response.put("error", "Bad Request");
        response.put("message", ex.getMessage());
        return ResponseEntity.badRequest().body(response);
    }

    // Optionally add more handlers like:
    // @ExceptionHandler(WebClientResponseException.class)
    // @ExceptionHandler(MethodArgumentNotValidException.class)
}


_______________________________
UserAuth.java:
package com.ums.auth_service.model;

import lombok.*;
import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.mapping.Document;

@Document(collection = "users")
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class UserAuth {
    @Id
    private String id;
    private String username;
    private String email;
    private String password;
}
_________________________________
UserAuthRepository.java:
package com.ums.auth_service.respository;

import com.ums.auth_service.model.UserAuth;
import org.springframework.data.mongodb.repository.MongoRepository;

import java.util.Optional;

public interface UserAuthRepository extends MongoRepository<UserAuth, String> {
    Optional<UserAuth> findByEmail(String email);
    boolean existsByEmail(String email);
}
___________________________________
JwtUtil.java:
package com.ums.auth_service.security;

import io.jsonwebtoken.*;
import io.jsonwebtoken.io.Decoders;
import io.jsonwebtoken.security.Keys;
import org.springframework.stereotype.Component;

import java.security.Key;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

@Component
public class JwtUtil {

    private final String SECRET_KEY = "4d535f6b72797a744a7657694249477479746a75536975754a47575962517773"; // Must be at least 256-bit for HS256

    private final long EXPIRATION_TIME = 1000 * 60 * 60 * 5; // 5 hours

    private Key getSigningKey() {
        byte[] keyBytes = Decoders.BASE64.decode(SECRET_KEY);
        return Keys.hmacShaKeyFor(keyBytes);
    }

    public String generateToken(String id, String username, String email) {
        Map<String, Object> claims = new HashMap<>();
        claims.put("id", id);
        claims.put("username", username);
        claims.put("email", email);

        return Jwts.builder()
                .setClaims(claims)
                .setSubject(email)
                .setIssuedAt(new Date())
                .setExpiration(new Date(System.currentTimeMillis() + EXPIRATION_TIME))
                .signWith(getSigningKey(), SignatureAlgorithm.HS256)
                .compact();
    }

    public Claims extractAllClaims(String token) {
        return Jwts.parserBuilder()
                .setSigningKey(getSigningKey())
                .build()
                .parseClaimsJws(token)
                .getBody();
    }

    public boolean isTokenValid(String token) {
        try {
            return extractAllClaims(token).getExpiration().after(new Date());
        } catch (JwtException | IllegalArgumentException e) {
            return false;
        }
    }

    public String extractEmail(String token) {
        return extractAllClaims(token).getSubject();
    }

    public String extractUserId(String token) {
        return (String) extractAllClaims(token).get("id");
    }

    public String extractUsername(String token) {
        return (String) extractAllClaims(token).get("username");
    }
}
_____________________________
AuthService.java:
package com.ums.auth_service.service;

import com.ums.auth_service.client.EmailClient;
import com.ums.auth_service.client.UserProfileClient;
import com.ums.auth_service.dto.*;
import com.ums.auth_service.model.UserAuth;
import com.ums.auth_service.respository.UserAuthRepository;
import com.ums.auth_service.security.JwtUtil;
import lombok.RequiredArgsConstructor;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;

@Service
@RequiredArgsConstructor
public class AuthService {

    private final UserAuthRepository repository;
    private final JwtUtil jwtUtil;
    private final BCryptPasswordEncoder passwordEncoder = new BCryptPasswordEncoder();
    private final EmailClient emailClient;
    private final UserProfileClient userProfileClient;

    public String register(RegisterRequest request) {
        if (repository.existsByEmail(request.getEmail())) {
            throw new RuntimeException("A user with email '" + request.getEmail() + "' already exists.");
        }

        UserAuth user = UserAuth.builder()
                .username(request.getUsername())
                .email(request.getEmail())
                .password(passwordEncoder.encode(request.getPassword()))
                .build();

        repository.save(user);

        // Send welcome email
        emailClient.sendEmail(new EmailRequestDTO(
                user.getEmail(),
                "Welcome to UMS!",
                "Hello " + user.getUsername() + ", your account has been created."
        ));

        // Create user profile (with placeholders for now)
        userProfileClient.createUserProfile(UserProfileRequestDTO.builder()
                .userId(user.getId())
                .fullName(request.getUsername()) // You can extend RegisterRequest to capture full name if needed
                .phone(request.getPhone())
                .address(request.getAddress())
                .build());

        return "User registered successfully!";
    }

    public AuthResponse login(LoginRequest request) {
        UserAuth user = repository.findByEmail(request.getEmail())
        .orElseThrow(() -> new RuntimeException("No user found with email: " + request.getEmail()));

        if (!passwordEncoder.matches(request.getPassword(), user.getPassword())) {
            throw new RuntimeException("Incorrect password for email: " + request.getEmail());
        }

        String token = jwtUtil.generateToken(user.getId(), user.getUsername(), user.getEmail());
        return new AuthResponse(token);
    }
}


______________________________________
pom.xml (for auth-service) :

<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.4.5</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.ums</groupId>
	<artifactId>auth-service</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>auth-service</name>
	<description>Demo project for Spring Boot</description>
	<url/>
	<licenses>
		<license/>
	</licenses>
	<developers>
		<developer/>
	</developers>
	<scm>
		<connection/>
		<developerConnection/>
		<tag/>
		<url/>
	</scm>
	<properties>
		<java.version>21</java.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-mongodb</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-webflux</artifactId>
		</dependency>
		
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
			<optional>true</optional>
		</dependency>
		<!-- JWT -->
		<!-- JJWT API -->
		<dependency>
				<groupId>io.jsonwebtoken</groupId>
				<artifactId>jjwt-api</artifactId>
				<version>0.11.5</version>
		</dependency>

		<!-- JJWT Impl -->
		<dependency>
				<groupId>io.jsonwebtoken</groupId>
				<artifactId>jjwt-impl</artifactId>
				<version>0.11.5</version>
				<scope>runtime</scope>
		</dependency>

		<!-- JJWT Jackson Serializer -->
		<dependency>
				<groupId>io.jsonwebtoken</groupId>
				<artifactId>jjwt-jackson</artifactId>
				<version>0.11.5</version>
				<scope>runtime</scope>
		</dependency>

		


		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-test</artifactId>
			<scope>test</scope>
		</dependency>
		
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<annotationProcessorPaths>
						<path>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</path>
					</annotationProcessorPaths>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</exclude>
					</excludes>
				</configuration>
			</plugin>
		</plugins>
	</build>

</project>

___________________________________________________
application.properties (for auth-service):

spring.application.name=auth-service

spring.data.mongodb.uri=mongodb+srv://Hasanth:22311a12k6@cluster0.sclhksi.mongodb.net/auth_db?retryWrites=true&w=majority

# Server port (optional, default 8080)
server.port=8081

# Logging level (optional)
logging.level.org.springframework.data.mongodb.core.MongoTemplate=DEBUG


____________________________________
____________________________________
email-service:
EmailController.java:
package com.ums.email_service.controller;

import com.ums.email_service.dto.EmailRequestDTO;
import com.ums.email_service.dto.EmailResponseDTO;
import com.ums.email_service.service.EmailSenderService;
import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDateTime;

@RestController
@RequestMapping("/api/email")
public class EmailController {

    @Autowired
    private EmailSenderService emailSenderService;

    @PostMapping("/send")
    public ResponseEntity<EmailResponseDTO> sendEmail(@RequestBody @Valid EmailRequestDTO request) {
        emailSenderService.sendEmail(request.getToEmail(), request.getSubject(), request.getBody());
        EmailResponseDTO response = new EmailResponseDTO("Email sent successfully!", LocalDateTime.now());
        return ResponseEntity.ok(response);
    }
}
__________________________________
EmailLogDTO.java:
package com.ums.email_service.dto;

import lombok.Builder;
import lombok.Data;

import java.time.LocalDateTime;

@Data
@Builder
public class EmailLogDTO {
    private String id;
    private String toEmail;
    private String subject;
    private String body;
    private LocalDateTime sentAt;
}
________________________________
EmailRequestDTO.java:
package com.ums.email_service.dto;

import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class EmailRequestDTO {

    @Email(message = "Invalid email format")
    @NotBlank(message = "Recipient email is required")
    private String toEmail;

    @NotBlank(message = "Subject is required")
    private String subject;

    @NotBlank(message = "Body is required")
    private String body;
}
_________________________________
EmailResponseDTO.java:
package com.ums.email_service.dto;

import lombok.AllArgsConstructor;
import lombok.Data;

import java.time.LocalDateTime;

@Data
@AllArgsConstructor
public class EmailResponseDTO {
    private String message;
    private LocalDateTime timestamp;
}
____________________________________
EmailLog.java:
package com.ums.email_service.model;

import lombok.*;
import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.mapping.Document;

import java.time.LocalDateTime;

@Document(collection = "emails")
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class EmailLog {

    @Id
    private String id;

    private String toEmail;
    private String subject;
    private String body;
    private LocalDateTime sentAt;
}
__________________________________________
EmailLogRepository.java:
package com.ums.email_service.repository;

import com.ums.email_service.model.EmailLog;
import org.springframework.data.mongodb.repository.MongoRepository;

public interface EmailLogRepository extends MongoRepository<EmailLog, String> {
}
___________________________________________
EmailSenderService.java:
package com.ums.email_service.service;

import com.ums.email_service.model.EmailLog;
import com.ums.email_service.repository.EmailLogRepository;
import jakarta.mail.MessagingException;
import jakarta.mail.internet.MimeMessage;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;

@Service
public class EmailSenderService {

    @Autowired
    private JavaMailSender mailSender;

    @Autowired
    private EmailLogRepository emailLogRepository;

    
    public void sendEmail(String toEmail, String subject, String body) {
        try {
            MimeMessage message = mailSender.createMimeMessage();
            MimeMessageHelper helper = new MimeMessageHelper(message, true);

            helper.setTo(toEmail);
            helper.setSubject(subject);
            helper.setText(body, true);
            helper.setFrom("your_email@gmail.com");

            mailSender.send(message);

            // Save to DB
            EmailLog log = EmailLog.builder()
                    .toEmail(toEmail)
                    .subject(subject)
                    .body(body)
                    .sentAt(LocalDateTime.now())
                    .build();

            emailLogRepository.save(log);
        } catch (MessagingException e) {
            throw new RuntimeException("Failed to send email", e);
        }
    }
}

_____________________________________
pom.xml (for email-service):

<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.4.5</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.ums</groupId>
	<artifactId>email-service</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>email-service</name>
	<description>Demo project for Spring Boot</description>
	<url/>
	<licenses>
		<license/>
	</licenses>
	<developers>
		<developer/>
	</developers>
	<scm>
		<connection/>
		<developerConnection/>
		<tag/>
		<url/>
	</scm>
	<properties>
		<java.version>21</java.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-mail</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
    	<groupId>jakarta.validation</groupId>
    	<artifactId>jakarta.validation-api</artifactId>
    	<version>3.0.2</version>
		</dependency>
		<dependency>
    	<groupId>org.springframework.boot</groupId>
    	<artifactId>spring-boot-starter-validation</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-mongodb</artifactId>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<annotationProcessorPaths>
						<path>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</path>
					</annotationProcessorPaths>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</exclude>
					</excludes>
				</configuration>
			</plugin>
		</plugins>
	</build>

</project>
_____________________________________________________

application.properties (for email-service):
spring.application.name=email-service

spring.data.mongodb.uri=mongodb+srv://Hasanth:22311a12k6@cluster0.sclhksi.mongodb.net/email_db?retryWrites=true&w=majority

# Server port (optional)
server.port=8083

logging.level.org.springframework.data.mongodb.core.MongoTemplate=DEBUG

spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=hasanthkumarmajji@gmail.com
spring.mail.password=mabp sduk xvay ynqj
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
__________________________________________________________________________
__________________________________________________________________________
user-service:
UserProfileController.java:
package com.ums.user_service.controller;

import com.ums.user_service.dto.UserProfileRequestDTO;
import com.ums.user_service.dto.UserProfileResponseDTO;
import com.ums.user_service.model.UserProfile;
import com.ums.user_service.service.UserProfileService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.stream.Collectors;

@RestController
@RequestMapping("/api/profiles")
public class UserProfileController {

    @Autowired
    private UserProfileService userProfileService;

    @PostMapping
    public UserProfileResponseDTO createProfile(@RequestBody UserProfileRequestDTO profileRequest) {
        UserProfile profile = convertToEntity(profileRequest);
        return convertToResponseDTO(userProfileService.createProfile(profile));
    }

    @GetMapping("/{id}")
    public UserProfileResponseDTO getProfileById(@PathVariable String id) {
        return userProfileService.getProfileById(id)
                .map(this::convertToResponseDTO)
                .orElseThrow(() -> new RuntimeException("Profile not found"));
    }

    @GetMapping("/user/{userId}")
    public UserProfileResponseDTO getProfileByUserId(@PathVariable String userId) {
        return userProfileService.getProfileByUserId(userId)
                .map(this::convertToResponseDTO)
                .orElseThrow(() -> new RuntimeException("Profile not found"));
    }

    @GetMapping
    public List<UserProfileResponseDTO> getAllProfiles() {
        return userProfileService.getAllProfiles()
                .stream()
                .map(this::convertToResponseDTO)
                .collect(Collectors.toList());
    }

    @PutMapping("/{id}")
    public UserProfileResponseDTO updateProfile(@PathVariable String id, @RequestBody UserProfileRequestDTO profileRequest) {
        UserProfile updatedProfile = convertToEntity(profileRequest);
        return convertToResponseDTO(userProfileService.updateProfile(id, updatedProfile));
    }

    @DeleteMapping("/{id}")
    public void deleteProfile(@PathVariable String id) {
        userProfileService.deleteProfile(id);
    }

    // DTO Mapping Methods

    private UserProfile convertToEntity(UserProfileRequestDTO dto) {
        return UserProfile.builder()
                .userId(dto.getUserId())
                .fullName(dto.getFullName())
                .phone(dto.getPhone())
                .address(dto.getAddress())
                .build();
    }

    private UserProfileResponseDTO convertToResponseDTO(UserProfile profile) {
        return UserProfileResponseDTO.builder()
                .id(profile.getId())
                .userId(profile.getUserId())
                .fullName(profile.getFullName())
                .phone(profile.getPhone())
                .address(profile.getAddress())
                .build();
    }
}
// This controller handles HTTP requests related to user profiles.
// It provides endpoints for creating, retrieving, updating, and deleting user profiles.
___________________________________________
UserProfileRequestDTO.java:
package com.ums.user_service.dto;

import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.AllArgsConstructor;
import lombok.Builder;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class UserProfileRequestDTO {

    private String userId;   // ID from auth-service
    private String fullName;
    private String phone;
    private String address;
}
______________________________________________
UserProfileResponseDTO.java:
package com.ums.user_service.dto;

import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.AllArgsConstructor;
import lombok.Builder;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class UserProfileResponseDTO {

    private String id;
    private String userId;
    private String fullName;
    private String phone;
    private String address;
}
// This DTO is used to send user profile data back to the client.
// It includes the user ID, full name, phone number, and address.
_____________________________________________________
UserProfile.java:
package com.ums.user_service.model;

import lombok.*;
import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.mapping.Document;

@Document(collection = "profiles")
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class UserProfile {

    @Id
    private String id;

    private String userId; // ID from auth-service

    private String fullName;
    private String phone;
    private String address;
}

__________________________________________________________
In com.ums.user_service.security.JwtUtil.java:


package com.ums.user_service.security;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import org.springframework.stereotype.Component;

import java.util.Date;

@Component
public class JwtUtil {
    private final String SECRET_KEY = "your_secret_key"; // Use same as auth-service

    public Claims extractClaims(String token) {
        return Jwts.parser()
                .setSigningKey(SECRET_KEY)
                .parseClaimsJws(token)
                .getBody();
    }

    public boolean isTokenValid(String token) {
        try {
            Claims claims = extractClaims(token);
            return claims.getExpiration().after(new Date());
        } catch (Exception e) {
            return false;
        }
    }

    public String extractEmail(String token) {
        return extractClaims(token).getSubject();
    }
}
__________________________________________________________
In com.ums.user_service.security.JwtAuthFilter.java:

package com.ums.user_service.security;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpHeaders;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import java.io.IOException;
import java.util.Collections;

@Component
@RequiredArgsConstructor
public class JwtAuthFilter extends OncePerRequestFilter {

    private final JwtUtil jwtUtil;

    @Override
    protected void doFilterInternal(HttpServletRequest request,
                                    HttpServletResponse response,
                                    FilterChain filterChain) throws ServletException, IOException {

        final String authHeader = request.getHeader(HttpHeaders.AUTHORIZATION);

        if (authHeader == null || !authHeader.startsWith("Bearer ")) {
            filterChain.doFilter(request, response);
            return;
        }

        final String token = authHeader.substring(7);
        if (jwtUtil.isTokenValid(token)) {
            String email = jwtUtil.extractEmail(token);

            UsernamePasswordAuthenticationToken authToken =
                    new UsernamePasswordAuthenticationToken(email, null, Collections.emptyList());

            authToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));
            SecurityContextHolder.getContext().setAuthentication(authToken);
        }

        filterChain.doFilter(request, response);
    }
}
__________________________________________________________
In com.ums.user_service.config.SecurityConfig.java:

package com.ums.user_service.config;

import com.ums.user_service.security.JwtAuthFilter;
import lombok.RequiredArgsConstructor;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

@Configuration
@RequiredArgsConstructor
public class SecurityConfig {

    private final JwtAuthFilter jwtAuthFilter;

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http
            .csrf(csrf -> csrf.disable())
            .authorizeHttpRequests(auth -> auth
                .requestMatchers("/api/profiles/**").authenticated()  // protect these
                .anyRequest().permitAll()
            )
            .addFilterBefore(jwtAuthFilter, UsernamePasswordAuthenticationFilter.class);

        return http.build();
    }
}

__________________________________________________________
UserProfileRepository.java:
package com.ums.user_service.repository;

import com.ums.user_service.model.UserProfile;
import org.springframework.data.mongodb.repository.MongoRepository;

import java.util.Optional;

public interface UserProfileRepository extends MongoRepository<UserProfile, String> {
    Optional<UserProfile> findByUserId(String userId);
}
____________________________________________________________
UserProfileService.java:
package com.ums.user_service.service;

import com.ums.user_service.model.UserProfile;
import com.ums.user_service.repository.UserProfileRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

@Service
public class UserProfileService {

    @Autowired
    private UserProfileRepository userProfileRepository;

    public UserProfile createProfile(UserProfile profile) {
        return userProfileRepository.save(profile);
    }

    public Optional<UserProfile> getProfileById(String id) {
        return userProfileRepository.findById(id);
    }

    public Optional<UserProfile> getProfileByUserId(String userId) {
        return userProfileRepository.findByUserId(userId);
    }

    public List<UserProfile> getAllProfiles() {
        return userProfileRepository.findAll();
    }

    public UserProfile updateProfile(String id, UserProfile updatedProfile) {
        return userProfileRepository.findById(id)
                .map(existing -> {
                    existing.setFullName(updatedProfile.getFullName());
                    existing.setPhone(updatedProfile.getPhone());
                    existing.setAddress(updatedProfile.getAddress());
                    return userProfileRepository.save(existing);
                })
                .orElseThrow(() -> new RuntimeException("Profile not found"));
    }

    public void deleteProfile(String id) {
        userProfileRepository.deleteById(id);
    }
}
______________________________________________________

pom.xml (for user-service):

<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.4.5</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.ums</groupId>
	<artifactId>user-service</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>user-service</name>
	<description>Demo project for Spring Boot</description>
	<url/>
	<licenses>
		<license/>
	</licenses>
	<developers>
		<developer/>
	</developers>
	<scm>
		<connection/>
		<developerConnection/>
		<tag/>
		<url/>
	</scm>
	<properties>
		<java.version>21</java.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-mongodb</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<!-- JWT -->
		<dependency>
  		<groupId>io.jsonwebtoken</groupId>
 		 	<artifactId>jjwt</artifactId>
  		<version>0.9.1</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<annotationProcessorPaths>
						<path>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</path>
					</annotationProcessorPaths>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</exclude>
					</excludes>
				</configuration>
			</plugin>
		</plugins>
	</build>

</project>


_____________________________________
application.properties (for user-service):
spring.application.name=user-service

spring.data.mongodb.uri=mongodb+srv://Hasanth:22311a12k6@cluster0.sclhksi.mongodb.net/user_db?retryWrites=true&w=majority

# Server port (optional, to avoid conflicts)
server.port=8082

logging.level.org.springframework.data.mongodb.core.MongoTemplate=DEBUG
